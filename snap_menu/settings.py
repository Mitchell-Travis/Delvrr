"""
Django settings for snap_menu project.

Generated by 'django-admin startproject' using Django 4.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path
import firebase_admin
from firebase_admin import credentials


# Path to your serviceAccountKey.json
FIREBASE_CREDENTIALS = "menu_dashboard/secrets/serviceAccountKey.json"

# Initialize Firebase Admin SDK
cred = credentials.Certificate(FIREBASE_CREDENTIALS)
firebase_admin.initialize_app(cred)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure--imqw09akhzp4l9k(-qvmxs2wi&#9@w@s)%kafewhcut)bsf*j'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = [

    'localhost', 
    '172.20.10.3', 
    '127.0.0.1', 
    '[::1]', 
    '0.0.0.0',
    'delvrr.onrender.com'

]



AUTH_USER_MODEL = 'accounts.User'

# Backend for case insensitivity
AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',  # Default backend
    'accounts.backends.CaseInsensitiveModelBackend',  # Custom backend
    'allauth.account.auth_backends.AuthenticationBackend',
)

INSTALLED_APPS = [
    'core.apps.CoreConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'accounts',
    'menu_dashboard',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.github'
]



MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

ROOT_URLCONF = 'snap_menu.urls'


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'libraries': {
                'custom_filters': 'menu_dashboard.templatetags.custom_filters',
            },
        },
    },
]
WSGI_APPLICATION = 'snap_menu.wsgi.application'


#Social login settings

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id':'895088122117-8d2vp5if4e7q29bd8vssu1luvcm4d184.apps.googleusercontent.com',
            'secret': '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',
          
        },
        'SCOPE': ['profile','email',],
         'AUTH_PARAMS': {'access_type': 'online'},
        'METHOD': 'oauth2',
        'VERIFIED_EMAIL': True,
    },
    'github': {
        'APP': {
            'client_id': '',
            'secret': '',
           
        }
    }
   
}
SOCIALACCOUNT_LOGIN_ON_GET=True


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Email Backends
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_USE_TLS = True  # Use TLS (secure) connection
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_HOST_USER = 'mitchellsherman01@gmail.com'
EMAIL_HOST_PASSWORD = 'jqlluijyefpdiuuv'
SERVER_EMAIL = EMAIL_HOST_USER
DEFAULT_FROM_EMAIL = 'Snap Menu <no-reply@snapmenu.localhost>'



CSRF_COOKIE_SECURE = False
CSRF_COOKIE_HTTPONLY = False

STATIC_URL = '/static/'

if not DEBUG:
    # Define the location where static files will be collected for production
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
    
    # Use WhiteNoise for serving compressed static files in production
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Define the locations of additional static file directories
# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),  # Additional static file directories
]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # Directory for collected static files

# Media files (uploads)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
 

LOGIN_REDIRECT_URL = '/afterlogin' # Page where users are redirected after login
LOGIN_URL = '/customer_signin'  # Page where users are redirected to log in



# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
